{"version":3,"sources":["components/Todos.js","components/AddForm.js","App.js","actions/todoActions.js","reducers/rootReducer.js","index.js"],"names":["Todos","finishTodo","id","props","deleteTodo","renderCheckbox","todo","className","onClick","finished","renderTodoText","body","src","this","todos","map","Component","AddForm","handleInput","e","updateInput","target","value","handleSubmit","preventDefault","Math","random","input","addTodo","onSubmit","type","onChange","placeholder","App","connect","state","dispatch","initState","rootReducer","action","updatedTodos","newTodos","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c34b9b79.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\n\r\nclass Todos extends Component {\r\n  finishTodo = (id) => {\r\n    this.props.finishTodo(id)\r\n  }\r\n  deleteTodo = (id) => {\r\n    this.props.deleteTodo(id)\r\n  }\r\n  render() {\r\n    const renderCheckbox = (todo) => {\r\n      return (\r\n        <div className=\"checkbox\" \r\n          onClick={() => {this.finishTodo(todo.id)}}\r\n        >\r\n          { todo.finished &&\r\n            <span className=\"check\">\r\n              &#10003;\r\n            </span>\r\n          }\r\n        </div>\r\n      )\r\n    }\r\n    const renderTodoText = (todo) => {\r\n      return (\r\n        <div className=\"todo-text\">\r\n          <p className={`${todo.finished ? \"todo finished\": \"todo\"}`} \r\n            onClick={() => {this.finishTodo(todo.id)}}\r\n          >\r\n            {todo.body}\r\n          </p>\r\n\r\n          <img src=\"/images/delete.png\"\r\n            className=\"delete-button\"\r\n            onClick={() => {this.deleteTodo(todo.id)}}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"todo-cont\">\r\n        {\r\n          this.props.todos.map((todo) => {\r\n            return (\r\n              <div className=\"todo-line\" key={todo.id}>\r\n                { renderCheckbox(todo) }\r\n\r\n                { renderTodoText(todo) }\r\n              </div> \r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Todos","import React, { Component } from \"react\"\r\n\r\nclass AddForm extends Component {\r\n  handleInput = (e) => {\r\n    this.props.updateInput(e.target.value)\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let todo = {\r\n      id: Math.random(), \r\n      body: this.props.input,\r\n      finished: false,\r\n    }\r\n    let defaultValue = \"\"\r\n\r\n    this.props.addTodo(todo)\r\n    this.props.updateInput(defaultValue)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <form className=\"newTodo-cont\" onSubmit={this.handleSubmit}>\r\n        <input type=\"text\"\r\n          onChange={this.handleInput}\r\n          value={this.props.input}\r\n          placeholder=\"Add New Task Here\">\r\n        </input>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddForm","import React, { Component } from \"react\"\nimport Todos from \"./components/Todos\"\nimport AddForm from \"./components/AddForm\"\nimport \"./styles/style.css\"\nimport { connect } from \"react-redux\"\nimport { deleteTodo, addTodo, updateInput, finishTodo } from \"./actions/todoActions\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"page-cont\">\n        <div className=\"double-lines\"></div>\n        <h1 className=\"page-title\">To-Do List</h1>\n\n        <div className=\"page-content\">\n          <Todos \n            todos={this.props.todos} \n            finishTodo={this.props.finishTodo}\n            deleteTodo={this.props.deleteTodo} \n          />\n\n          <AddForm \n            addTodo={this.props.addTodo} \n            updateInput={this.props.updateInput}\n            input={this.props.input}\n          />\n        </div>\n        \n      </div>\n    );\n  } \n}\n\n\n// Redux\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos,\n    input: state.input,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    finishTodo: (id) => {\n      dispatch(finishTodo(id))\n    },\n    deleteTodo: (id) => {\n      dispatch(deleteTodo(id))\n    },\n    addTodo: (todo) => {\n      dispatch(addTodo(todo))\n    },\n    updateInput: (input) => {\n      dispatch(updateInput(input))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const finishTodo = (id) => {\r\n  return {\r\n    type: \"FINISH_TODO\",\r\n    id,\r\n  }\r\n}\r\n\r\nexport const deleteTodo = (id) => {\r\n  return {\r\n    type: \"DELETE_TODO\",\r\n    id,\r\n  }\r\n}\r\n\r\nexport const addTodo = (todo) => {\r\n  return {\r\n    type: \"ADD_TODO\",\r\n    todo,\r\n  }\r\n}\r\n\r\nexport const updateInput = (input) => {\r\n  return {\r\n    type: \"UPDATE_INPUT\",\r\n    input,\r\n  }\r\n}","const initState = {\r\n  todos: [\r\n    {\r\n      id: 0,\r\n      body: \"Finish React todo list project\",\r\n      finished: true,\r\n    }, \r\n    {\r\n      id: 1,\r\n      body: \"Watch Udemy course: Understanding the weird parts of JavaScript\",\r\n      finished: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      body: \"Excersise: rock climbing\",\r\n      finished: false,\r\n    }\r\n  ],\r\n  input: \"\",\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  if (action.type === \"FINISH_TODO\") {    \r\n    let updatedTodos = state.todos.map((todo) => {\r\n      if (todo.id !== action.id) {\r\n        // keep the rest as is\r\n        return todo\r\n      }\r\n  \r\n      // change the one clicked with an updated value\r\n      let finishedTodo = {\r\n        ...todo,\r\n        finished: !todo.finished,\r\n      }\r\n      return finishedTodo\r\n    })\r\n\r\n    return {\r\n      ...state,\r\n      todos: updatedTodos,\r\n    }\r\n  }\r\n  \r\n  if (action.type === \"DELETE_TODO\") {\r\n    let newTodos = state.todos.filter((todo) => {\r\n      return todo.id !== action.id\r\n    });\r\n    return {\r\n      ...state,\r\n      todos: newTodos,\r\n    }\r\n  }\r\n\r\n  if (action.type === \"ADD_TODO\") {\r\n    return {\r\n      ...state,\r\n      todos: [...state.todos, action.todo]\r\n    }\r\n  }\r\n\r\n  if (action.type === \"UPDATE_INPUT\") {\r\n    return {\r\n      ...state,\r\n      input: action.input\r\n    }\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}